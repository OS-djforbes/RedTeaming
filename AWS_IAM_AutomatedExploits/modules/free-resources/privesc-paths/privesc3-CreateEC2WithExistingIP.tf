resource "aws_iam_policy" "ec2-admin" {
  name        = "ec2-admin"
  path        = "/"
#  description = "Allows privesc via ec2:RunInstances and iam:passrole and includes some other helpful permissions"

  # Terraform's "jsonencode" function converts a
  # Terraform expression result to valid JSON syntax.
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = [
	      "iam:PassRole",
        "ec2:DescribeInstances",
        "ec2:RunInstances",
        "ec2:CreateKeyPair",
        "ec2:AssociateIamInstanceProfile"
        ]
        Effect   = "Allow"
        Resource = "*"
      },
    ]
  })
}

resource "aws_iam_role" "ec2-admin-role" {
  name                = "ec2-admin-role"
  assume_role_policy  = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Sid    = ""
        Principal = {
          AWS = var.aws_assume_role_arn
        }
      },
    ]
  })
}

resource "aws_iam_instance_profile" "admin_instance_profile" {
  name = "admin_instance_profile"
  role = aws_iam_role.admin_access.name
}

resource "aws_iam_role" "admin_access" {
  name = "admin_access"
  assume_role_policy = jsonencode({
    "Version": "2012-10-17"
    "Statement": [
        {
            Action    = "sts:AssumeRole"
            Effect    = "Allow"
            Sid       = ""
            Principal = {
            Service   = ["ec2.amazonaws.com"]
            }
          }, 
        ]
     })
}

data "aws_iam_policy" "AdministratorAccess" {
  arn = "arn:aws:iam::aws:policy/AdministratorAccess"
}

resource "aws_iam_role_policy_attachment" "admin_access_AdministratorAccess" {
  role       = "${aws_iam_role.admin_access.name}"
  policy_arn = "${data.aws_iam_policy.AdministratorAccess.arn}"
}

resource "aws_iam_user" "Joementum" {
  name = "Joementum"
  path = "/"

  tags = {
  firstname = "Harlow"
  lastname = "Natasha"
  company = "BCR Industries"
  }
}

resource "aws_iam_access_key" "Joementum" {
  user = aws_iam_user.Joementum.name
}


resource "aws_iam_user_policy_attachment" "Joementum-attach-policy" {
  user       = aws_iam_user.Joementum.name
  policy_arn = aws_iam_policy.ec2-admin.arn
}

resource "aws_iam_role_policy_attachment" "ec2-admin-role-attach-policy" {
  role       = aws_iam_role.ec2-admin-role.name
  policy_arn = aws_iam_policy.ec2-admin.arn

}


