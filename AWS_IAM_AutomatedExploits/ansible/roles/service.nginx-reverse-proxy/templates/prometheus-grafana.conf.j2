server {
  listen 80;
  server_name prometheus.{{ domain }};
  return 301 https://$server_name$request_uri;
}

server {
  listen 80;
  server_name alertmanager.{{ domain }};
  return 301 https://$server_name$request_uri;
}

server {
  listen 80;
  server_name grafana.{{ domain }};
  return 301 https://$server_name$request_uri;
}

server {
  listen 80;
  server_name private-loki.{{ domain }};
  return 301 https://$server_name$request_uri;
}

server {
  listen 80;
  server_name loki.{{ domain }};
  return 301 https://$server_name$request_uri;
}

server {
  listen 443 ssl http2;
  server_name prometheus.{{ domain }};

  ssl_certificate /etc/letsencrypt/{{ domain }}/live/{{ domain }}/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/{{ domain }}/live/{{ domain }}/privkey.pem;

  #charset koi8-r;
  #access_log  /var/log/nginx/host.access.log  main;

  location /oauth2/ {
    proxy_pass       http://127.0.0.1:4180;
    proxy_set_header Host                    $host;
    proxy_set_header X-Real-IP               $remote_addr;
    proxy_set_header X-Scheme                $scheme;
    # proxy_set_header X-Auth-Request-Redirect $request_uri;
    proxy_set_header X-Auth-Request-Redirect https://$host/oauth2/callback;
    proxy_set_header redirect_uri            https://$host/oauth2/callback;
  }
  location = /oauth2/auth {
    proxy_pass       http://127.0.0.1:4180;
    proxy_set_header Host             $host;
    proxy_set_header X-Real-IP        $remote_addr;
    proxy_set_header X-Scheme         $scheme;
    # nginx auth_request includes headers but not body
    proxy_set_header Content-Length   "";
    proxy_pass_request_body           off;
  }

  large_client_header_buffers 6 16k;
  client_max_body_size 4M;
  location / {
    auth_request /oauth2/auth;
    error_page 401 = /oauth2/sign_in;

    # pass information via X-User and X-Email headers to backend,
    # requires running with --set-xauthrequest flag
    auth_request_set $user   $upstream_http_x_auth_request_user;
    auth_request_set $email  $upstream_http_x_auth_request_email;
    proxy_set_header X-User  $user;
    proxy_set_header X-Email $email;

    # if you enabled --pass-access-token, this will pass the token to the backend
    auth_request_set $token  $upstream_http_x_auth_request_access_token;
    proxy_set_header X-Access-Token $token;

    # if you enabled --cookie-refresh, this is needed for it to work with auth_request
    auth_request_set $auth_cookie $upstream_http_set_cookie;
    add_header Set-Cookie $auth_cookie;

    # When using the --set-authorization flag, some provider's cookies can exceed the 4kb
    # limit and so the OAuth2 Proxy splits these into multiple parts.
    # Nginx normally only copies the first `Set-Cookie` header from the auth_request to the response,
    # so if your cookies are larger than 4kb, you will need to extract additional cookies manually.
    auth_request_set $auth_cookie_name_upstream_1 $upstream_cookie_auth_cookie_name_1;

    # Extract the Cookie attributes from the first Set-Cookie header and append them
    # to the second part ($upstream_cookie_* variables only contain the raw cookie content)
    if ($auth_cookie ~* "(; .*)") {
        set $auth_cookie_name_0 $auth_cookie;
        set $auth_cookie_name_1 "auth_cookie_name_1=$auth_cookie_name_upstream_1$1";
    }

    # Send both Set-Cookie headers now if there was a second part
    if ($auth_cookie_name_upstream_1) {
        add_header Set-Cookie $auth_cookie_name_0;
        add_header Set-Cookie $auth_cookie_name_1;
    }

    proxy_pass http://localhost:9090;
    proxy_pass_request_headers on;
    proxy_set_header x-real-IP $remote_addr;
    proxy_set_header x-forwarded-for $proxy_add_x_forwarded_for;
    proxy_set_header host $host;
    proxy_set_header X-Forwarded-Host $host:$server_port;
    proxy_set_header X-Forwarded-Server $host;
    proxy_read_timeout 600s;
  }
}

server {
  listen 443 ssl http2;
  server_name alertmanager.{{ domain }};

  ssl_certificate /etc/letsencrypt/{{ domain }}/live/{{ domain }}/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/{{ domain }}/live/{{ domain }}/privkey.pem;

  #charset koi8-r;
  #access_log  /var/log/nginx/host.access.log  main;

  location /oauth2/ {
    proxy_pass       http://127.0.0.1:4180;
    proxy_set_header Host                    $host;
    proxy_set_header X-Real-IP               $remote_addr;
    proxy_set_header X-Scheme                $scheme;
    # proxy_set_header X-Auth-Request-Redirect $request_uri;
    proxy_set_header X-Auth-Request-Redirect https://$host/oauth2/callback;
    proxy_set_header redirect_uri            https://$host/oauth2/callback;
  }
  location = /oauth2/auth {
    proxy_pass       http://127.0.0.1:4180;
    proxy_set_header Host             $host;
    proxy_set_header X-Real-IP        $remote_addr;
    proxy_set_header X-Scheme         $scheme;
    # nginx auth_request includes headers but not body
    proxy_set_header Content-Length   "";
    proxy_pass_request_body           off;
  }

  large_client_header_buffers 6 16k;
  client_max_body_size 4M;
  location / {
    auth_request /oauth2/auth;
    error_page 401 = /oauth2/sign_in;

    # pass information via X-User and X-Email headers to backend,
    # requires running with --set-xauthrequest flag
    auth_request_set $user   $upstream_http_x_auth_request_user;
    auth_request_set $email  $upstream_http_x_auth_request_email;
    proxy_set_header X-User  $user;
    proxy_set_header X-Email $email;

    # if you enabled --pass-access-token, this will pass the token to the backend
    auth_request_set $token  $upstream_http_x_auth_request_access_token;
    proxy_set_header X-Access-Token $token;

    # if you enabled --cookie-refresh, this is needed for it to work with auth_request
    auth_request_set $auth_cookie $upstream_http_set_cookie;
    add_header Set-Cookie $auth_cookie;

    # When using the --set-authorization flag, some provider's cookies can exceed the 4kb
    # limit and so the OAuth2 Proxy splits these into multiple parts.
    # Nginx normally only copies the first `Set-Cookie` header from the auth_request to the response,
    # so if your cookies are larger than 4kb, you will need to extract additional cookies manually.
    auth_request_set $auth_cookie_name_upstream_1 $upstream_cookie_auth_cookie_name_1;

    # Extract the Cookie attributes from the first Set-Cookie header and append them
    # to the second part ($upstream_cookie_* variables only contain the raw cookie content)
    if ($auth_cookie ~* "(; .*)") {
        set $auth_cookie_name_0 $auth_cookie;
        set $auth_cookie_name_1 "auth_cookie_name_1=$auth_cookie_name_upstream_1$1";
    }

    # Send both Set-Cookie headers now if there was a second part
    if ($auth_cookie_name_upstream_1) {
        add_header Set-Cookie $auth_cookie_name_0;
        add_header Set-Cookie $auth_cookie_name_1;
    }

    proxy_pass http://localhost:9093;
    proxy_pass_request_headers on;
    proxy_set_header x-real-IP $remote_addr;
    proxy_set_header x-forwarded-for $proxy_add_x_forwarded_for;
    proxy_set_header host $host;
    proxy_set_header X-Forwarded-Host $host:$server_port;
    proxy_set_header X-Forwarded-Server $host;
    proxy_read_timeout 600s;
  }
}

server {
  listen 443 ssl http2 default;
  server_name grafana.{{ domain }};

  ssl_certificate /etc/letsencrypt/{{ domain }}/live/{{ domain }}/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/{{ domain }}/live/{{ domain }}/privkey.pem;

  #charset koi8-r;
  #access_log  /var/log/nginx/host.access.log  main;

  location /oauth2/ {
    proxy_pass       http://127.0.0.1:4180;
    proxy_set_header Host                    $host;
    proxy_set_header X-Real-IP               $remote_addr;
    proxy_set_header X-Scheme                $scheme;
    # proxy_set_header X-Auth-Request-Redirect $request_uri;
    proxy_set_header X-Auth-Request-Redirect https://$host/oauth2/callback;
    proxy_set_header redirect_uri            https://$host/oauth2/callback;
  }
  location = /oauth2/auth {
    proxy_pass       http://127.0.0.1:4180;
    proxy_set_header Host             $host;
    proxy_set_header X-Real-IP        $remote_addr;
    proxy_set_header X-Scheme         $scheme;
    # nginx auth_request includes headers but not body
    proxy_set_header Content-Length   "";
    proxy_pass_request_body           off;
  }

  large_client_header_buffers 6 16k;
  client_max_body_size 4M;
  location / {
    auth_request /oauth2/auth;
    error_page 401 = /oauth2/sign_in;

    # pass information via X-User and X-Email headers to backend,
    # requires running with --set-xauthrequest flag
    auth_request_set $user   $upstream_http_x_auth_request_user;
    auth_request_set $email  $upstream_http_x_auth_request_email;
    proxy_set_header X-User  $user;
    proxy_set_header X-Email $email;

    # if you enabled --pass-access-token, this will pass the token to the backend
    auth_request_set $token  $upstream_http_x_auth_request_access_token;
    proxy_set_header X-Access-Token $token;

    # if you enabled --cookie-refresh, this is needed for it to work with auth_request
    auth_request_set $auth_cookie $upstream_http_set_cookie;
    add_header Set-Cookie $auth_cookie;

    # When using the --set-authorization flag, some provider's cookies can exceed the 4kb
    # limit and so the OAuth2 Proxy splits these into multiple parts.
    # Nginx normally only copies the first `Set-Cookie` header from the auth_request to the response,
    # so if your cookies are larger than 4kb, you will need to extract additional cookies manually.
    auth_request_set $auth_cookie_name_upstream_1 $upstream_cookie_auth_cookie_name_1;

    # Extract the Cookie attributes from the first Set-Cookie header and append them
    # to the second part ($upstream_cookie_* variables only contain the raw cookie content)
    if ($auth_cookie ~* "(; .*)") {
        set $auth_cookie_name_0 $auth_cookie;
        set $auth_cookie_name_1 "auth_cookie_name_1=$auth_cookie_name_upstream_1$1";
    }

    # Send both Set-Cookie headers now if there was a second part
    if ($auth_cookie_name_upstream_1) {
        add_header Set-Cookie $auth_cookie_name_0;
        add_header Set-Cookie $auth_cookie_name_1;
    }

    proxy_pass http://localhost:3000;
    proxy_pass_request_headers on;
    proxy_set_header x-real-IP $remote_addr;
    proxy_set_header x-forwarded-for $proxy_add_x_forwarded_for;
    proxy_set_header host $host;
    proxy_set_header X-Forwarded-Host $host:$server_port;
    proxy_set_header X-Forwarded-Server $host;
    proxy_read_timeout 600s;
  }
}

server {
  listen 443 ssl http2;
  server_name private-loki.{{ domain }};

  ssl_certificate /etc/letsencrypt/{{ domain }}/live/{{ domain }}/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/{{ domain }}/live/{{ domain }}/privkey.pem;

  #charset koi8-r;
  #access_log  /var/log/nginx/host.access.log  main;

  large_client_header_buffers 6 16k;
  client_max_body_size 16M;
  location / {
    auth_basic "Auth required.";
    auth_basic_user_file /etc/nginx/conf.d/.htpasswd;

    proxy_pass http://localhost:3100;
    proxy_pass_request_headers on;
    proxy_set_header x-real-IP $remote_addr;
    proxy_set_header x-forwarded-for $proxy_add_x_forwarded_for;
    proxy_set_header host $host;
    proxy_set_header X-Forwarded-Host $host:$server_port;
    proxy_set_header X-Forwarded-Server $host;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_read_timeout 600s;
  }
}

server {
  listen 443 ssl http2;
  server_name loki.{{ domain }};

  ssl_certificate /etc/letsencrypt/{{ domain }}/live/{{ domain }}/fullchain.pem;
  ssl_certificate_key /etc/letsencrypt/{{ domain }}/live/{{ domain }}/privkey.pem;

  #charset koi8-r;
  #access_log  /var/log/nginx/host.access.log  main;

  large_client_header_buffers 6 16k;
  client_max_body_size 16M;
  location / {
    auth_basic "Auth required.";
    auth_basic_user_file /etc/nginx/conf.d/.htpasswd;

    proxy_pass http://localhost:3100;
    proxy_pass_request_headers on;
    proxy_set_header x-real-IP $remote_addr;
    proxy_set_header x-forwarded-for $proxy_add_x_forwarded_for;
    proxy_set_header host $host;
    proxy_set_header X-Forwarded-Host $host:$server_port;
    proxy_set_header X-Forwarded-Server $host;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_read_timeout 600s;
  }
}



